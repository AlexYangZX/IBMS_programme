import numpy as np
import socket
import RPi.GPIO as GPIO
import sys
import os

while True:
    print('start')
    # 初始化灯状态
    a_light = 0
    b_light = 0
    c_light = 0
    d_light = 0
    e_light = 0
    f_light = 0
    g_light = 0
    h_light = 0
    z_light = 0
    j_light = 0
    k_light = 0
    l_light = 0
    m_light = 0
    n_light = 0
    o_light = 0
    p_light = 0
    q_light = 0
    r_light = 0
    s_light = 0
    t_light = 0
    u_light = 0
    v_light = 0
    w_light = 0
    x_light = 0
    # 指示灯状态控制变量
    a1, a2, b1, b2, c1, c2, d1, d2, e1, e2, f1, f2, g1, g2, h1, h2 = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    z1, z2, j1, j2, k1, k2, l1, l2, m1, m2, n1, n2, o1, o2, p1, p2 = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    q1, q2, r1, r2, s1, s2, t1, t2, u1, u2, v1, v2, w1, w2, x1, x2 = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

    # 通信及数据传输
    s = socket.socket()
    host = '192.168.18.5'  # 主机IP地址
    port = 6666
    s.connect((host, port))
    m = s.recv(1024)
    m = m.decode()
    got_it = 'got it'
    got_it = got_it.encode()
    s.send(got_it)

    # 处理PC端传送的数据
    sim_path = []
    for i in range(0, len(m)):
        if m[i] != '[' and m[i] != ']' and m[i] != ' ' and m[i] != "'":
            sim_path.append(m[i])

    path_link = ''
    for i in range(0, len(sim_path)):
        path_link = path_link + sim_path[i]

    path_split = path_link.strip(',').split(',')

    path = path_split

    for i in range(0, len(path)):
        sim_path.append(path[i].strip('*').split('*'))

    # 判断两点之间是否连通及连通方向
    for i in range(0, len(sim_path)):
        for j in range(0, len(sim_path[i]) - 1):
            # 正向
            if sim_path[i][j] == '0' and sim_path[i][j + 1] == '1':
                a1 = 1
            if sim_path[i][j] == '1' and sim_path[i][j + 1] == '2':
                b1 = 1
            if sim_path[i][j] == '2' and sim_path[i][j + 1] == '3':
                c1 = 1
            if sim_path[i][j] == '0' and sim_path[i][j + 1] == '4':
                d1 = 1
            if sim_path[i][j] == '1' and sim_path[i][j + 1] == '5':
                e1 = 1
            if sim_path[i][j] == '2' and sim_path[i][j + 1] == '6':
                f1 = 1
            if sim_path[i][j] == '3' and sim_path[i][j + 1] == '7':
                g1 = 1
            if sim_path[i][j] == '4' and sim_path[i][j + 1] == '5':
                h1 = 1
            if sim_path[i][j] == '5' and sim_path[i][j + 1] == '6':
                z1 = 1
            if sim_path[i][j] == '6' and sim_path[i][j + 1] == '7':
                j1 = 1
            if sim_path[i][j] == '4' and sim_path[i][j + 1] == '8':
                k1 = 1
            if sim_path[i][j] == '5' and sim_path[i][j + 1] == '9':
                l1 = 1
            if sim_path[i][j] == '6' and sim_path[i][j + 1] == '10':
                m1 = 1
            if sim_path[i][j] == '7' and sim_path[i][j + 1] == '11':
                n1 = 1
            if sim_path[i][j] == '8' and sim_path[i][j + 1] == '9':
                o1 = 1
            if sim_path[i][j] == '9' and sim_path[i][j + 1] == '10':
                p1 = 1
            if sim_path[i][j] == '10' and sim_path[i][j + 1] == '11':
                q1 = 1
            if sim_path[i][j] == '8' and sim_path[i][j + 1] == '12':
                r1 = 1
            if sim_path[i][j] == '9' and sim_path[i][j + 1] == '13':
                s1 = 1
            if sim_path[i][j] == '10' and sim_path[i][j + 1] == '14':
                t1 = 1
            if sim_path[i][j] == '11' and sim_path[i][j + 1] == '15':
                u1 = 1
            if sim_path[i][j] == '12' and sim_path[i][j + 1] == '13':
                v1 = 1
            if sim_path[i][j] == '13' and sim_path[i][j + 1] == '14':
                w1 = 1
            if sim_path[i][j] == '14' and sim_path[i][j + 1] == '15':
                x1 = 1
            # 反向
            if sim_path[i][j] == '1' and sim_path[i][j + 1] == '0':
                a2 = 1
            if sim_path[i][j] == '2' and sim_path[i][j + 1] == '1':
                b2 = 1
            if sim_path[i][j] == '3' and sim_path[i][j + 1] == '2':
                c2 = 1
            if sim_path[i][j] == '4' and sim_path[i][j + 1] == '0':
                d2 = 1
            if sim_path[i][j] == '5' and sim_path[i][j + 1] == '1':
                e2 = 1
            if sim_path[i][j] == '6' and sim_path[i][j + 1] == '2':
                f2 = 1
            if sim_path[i][j] == '7' and sim_path[i][j + 1] == '3':
                g2 = 1
            if sim_path[i][j] == '5' and sim_path[i][j + 1] == '4':
                h2 = 1
            if sim_path[i][j] == '6' and sim_path[i][j + 1] == '5':
                z2 = 1
            if sim_path[i][j] == '7' and sim_path[i][j + 1] == '6':
                j2 = 1
            if sim_path[i][j] == '8' and sim_path[i][j + 1] == '4':
                k2 = 1
            if sim_path[i][j] == '9' and sim_path[i][j + 1] == '5':
                l2 = 1
            if sim_path[i][j] == '10' and sim_path[i][j + 1] == '6':
                m2 = 1
            if sim_path[i][j] == '11' and sim_path[i][j + 1] == '7':
                n2 = 1
            if sim_path[i][j] == '9' and sim_path[i][j + 1] == '8':
                o2 = 1
            if sim_path[i][j] == '10' and sim_path[i][j + 1] == '9':
                p2 = 1
            if sim_path[i][j] == '11' and sim_path[i][j + 1] == '10':
                q2 = 1
            if sim_path[i][j] == '12' and sim_path[i][j + 1] == '8':
                r2 = 1
            if sim_path[i][j] == '13' and sim_path[i][j + 1] == '9':
                s2 = 1
            if sim_path[i][j] == '14' and sim_path[i][j + 1] == '10':
                t2 = 1
            if sim_path[i][j] == '15' and sim_path[i][j + 1] == '11':
                u2 = 1
            if sim_path[i][j] == '13' and sim_path[i][j + 1] == '12':
                v2 = 1
            if sim_path[i][j] == '14' and sim_path[i][j + 1] == '13':
                w2 = 1
            if sim_path[i][j] == '15' and sim_path[i][j + 1] == '14':
                x2 = 1

    # 判断方向
    if a1 == 1:
        a_light = 1
    if a2 == 1:
        a_light = 2
    if a1 != 1 and a2 != 1:
        a_light = 3

    if b1 == 1:
        b_light = 1
    if b2 == 1:
        b_light = 2
    if b1 != 1 and b2 != 1:
        b_light = 3

    if c1 == 1:
        c_light = 1
    if c2 == 1:
        c_light = 2
    if c1 != 1 and c2 != 1:
        c_light = 3

    if d1 == 1:
        d_light = 1
    if d2 == 1:
        d_light = 2
    if d1 != 1 and d2 != 1:
        d_light = 3

    if e1 == 1:
        e_light = 1
    if e2 == 1:
        e_light = 2
    if e1 != 1 and e2 != 1:
        e_light = 3

    if f1 == 1:
        f_light = 1
    if f2 == 1:
        f_light = 2
    if f1 != 1 and f2 != 1:
        f_light = 3

    if g1 == 1:
        g_light = 1
    if g2 == 1:
        g_light = 2
    if g1 != 1 and g2 != 1:
        g_light = 3

    if h1 == 1:
        h_light = 1
    if h2 == 1:
        h_light = 2
    if h1 != 1 and h2 != 1:
        h_light = 3

    if z1 == 1:
        z_light = 1
    if z2 == 1:
        z_light = 2
    if z1 != 1 and z2 != 1:
        z_light = 3

    if j1 == 1:
        j_light = 1
    if j2 == 1:
        j_light = 2
    if j1 != 1 and j2 != 1:
        j_light = 3

    if k1 == 1:
        k_light = 1
    if k2 == 1:
        k_light = 2
    if k1 != 1 and k2 != 1:
        k_light = 3

    if l1 == 1:
        l_light = 1
    if l2 == 1:
        l_light = 2
    if l1 != 1 and l2 != 1:
        l_light = 3

    if m1 == 1:
        m_light = 1
    if m2 == 1:
        m_light = 2
    if m1 != 1 and m2 != 1:
        m_light = 3

    if n1 == 1:
        n_light = 1
    if n2 == 1:
        n_light = 2
    if n1 != 1 and n2 != 1:
        n_light = 3

    if o1 == 1:
        o_light = 1
    if o2 == 1:
        o_light = 2
    if o1 != 1 and o2 != 1:
        o_light = 3

    if p1 == 1:
        p_light = 1
    if p2 == 1:
        p_light = 2
    if p1 != 1 and p2 != 1:
        p_light = 3

    if q1 == 1:
        q_light = 1
    if q2 == 1:
        q_light = 2
    if q1 != 1 and q2 != 1:
        q_light = 3

    if r1 == 1:
        r_light = 1
    if r2 == 1:
        r_light = 2
    if r1 != 1 and r2 != 1:
        r_light = 3

    if s1 == 1:
        s_light = 1
    if s2 == 1:
        s_light = 2
    if s1 != 1 and s2 != 1:
        s_light = 3

    if t1 == 1:
        t_light = 1
    if t2 == 1:
        t_light = 2
    if t1 != 1 and t2 != 1:
        t_light = 3

    if u1 == 1:
        u_light = 1
    if u2 == 1:
        u_light = 2
    if u1 != 1 and u2 != 1:
        u_light = 3

    if v1 == 1:
        v_light = 1
    if v2 == 1:
        v_light = 2
    if v1 != 1 and v2 != 1:
        v_light = 3

    if w1 == 1:
        w_light = 1
    if w2 == 1:
        w_light = 2
    if w1 != 1 and w2 != 1:
        w_light = 3

    if x1 == 1:
        x_light = 1
    if x2 == 1:
        x_light = 2
    if x1 != 1 and x2 != 1:
        x_light = 3

    # 各路径上指示灯的状态
    state_of_light = [a_light, b_light, c_light, d_light, e_light, f_light, g_light, h_light, z_light, j_light, k_light,
                      l_light, m_light, n_light, o_light, p_light, q_light, r_light, s_light, t_light, u_light,v_light,
                      w_light, x_light]

    # 初始化LED点阵及各个通路点阵
    map = [[0, 0, 0, 0, 0, 0, 0, 0],
           [0, 0, 0, 0, 0, 0, 0, 0],
           [0, 0, 0, 0, 0, 0, 0, 0],
           [0, 0, 0, 0, 0, 0, 0, 0],
           [0, 0, 0, 0, 0, 0, 0, 0],
           [0, 0, 0, 0, 0, 0, 0, 0],
           [0, 0, 0, 0, 0, 0, 0, 0],
           [0, 0, 0, 0, 0, 0, 0, 0]]

    clean_map = ['00000000',
                 '00000000',
                 '00000000',
                 '00000000',
                 '00000000',
                 '00000000',
                 '00000000',
                 '00000000']

    a = [[0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0]]

    b = [[0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0]]

    c = [[0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0]]

    d = [[0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0]]

    e = [[0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0]]

    f = [[0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0]]

    g = [[0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0]]

    h = [[0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0]]

    z = [[0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0]]

    j = [[0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0]]

    k = [[0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0]]

    l = [[0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0]]

    m = [[0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0]]

    n = [[0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0]]

    o = [[0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0]]

    p = [[0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0]]

    q = [[0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0]]

    r = [[0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0]]

    s = [[0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0]]

    t = [[0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0]]

    u = [[0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0]]

    v = [[0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0]]

    w = [[0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0]]

    x = [[0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0]]
    # 判断通路
    if a2 == 1 or a1 == 1:
        a = [[1, 1, 1, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0]]
        a = np.array(a)

    if b2 == 1 or b1 == 1:
        b = [[0, 0, 1, 1, 1, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0]]
        b = np.array(b)

    if c2 == 1 or c1 == 1:
        c = [[0, 0, 0, 0, 1, 1, 1, 1],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0]]
        c = np.array(c)

    if d2 == 1 or d1 == 1:
        d = [[1, 0, 0, 0, 0, 0, 0, 0],
             [1, 0, 0, 0, 0, 0, 0, 0],
             [1, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0]]
        d = np.array(d)

    if e2 == 1 or e1 == 1:
        e = [[0, 0, 1, 0, 0, 0, 0, 0],
             [0, 0, 1, 0, 0, 0, 0, 0],
             [0, 0, 1, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0]]
        e = np.array(e)

    if f2 == 1 or f1 == 1:
        f = [[0, 0, 0, 0, 1, 0, 0, 0],
             [0, 0, 0, 0, 1, 0, 0, 0],
             [0, 0, 0, 0, 1, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0]]
        f = np.array(f)

    if g2 == 1 or g1 == 1:
        g = [[0, 0, 0, 0, 0, 0, 0, 1],
             [0, 0, 0, 0, 0, 0, 0, 1],
             [0, 0, 0, 0, 0, 0, 0, 1],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0]]
        g = np.array(g)

    if h2 == 1 or h1 == 1:
        h = [[0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [1, 1, 1, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0]]
        h = np.array(h)

    if z2 == 1 or z1 == 1:
        z = [[0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 1, 1, 1, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0]]
        z = np.array(z)

    if j2 == 1 or j1 == 1:
        j = [[0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 1, 1, 1, 1],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0]]
        j = np.array(j)

    if k2 == 1 or k1 == 1:
        k = [[0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [1, 0, 0, 0, 0, 0, 0, 0],
             [1, 0, 0, 0, 0, 0, 0, 0],
             [1, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0]]
        k = np.array(k)

    if l2 == 1 or l1 == 1:
        l = [[0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 1, 0, 0, 0, 0, 0],
             [0, 0, 1, 0, 0, 0, 0, 0],
             [0, 0, 1, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0]]
        l = np.array(l)

    if m2 == 1 or m1 == 1:
        m = [[0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 1, 0, 0, 0],
             [0, 0, 0, 0, 1, 0, 0, 0],
             [0, 0, 0, 0, 1, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0]]
        m = np.array(m)

    if n2 == 1 or n1 == 1:
        n = [[0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 1],
             [0, 0, 0, 0, 0, 0, 0, 1],
             [0, 0, 0, 0, 0, 0, 0, 1],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0]]
        n = np.array(n)

    if o2 == 1 or o1 == 1:
        o = [[0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [1, 1, 1, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0]]
        o = np.array(o)

    if p2 == 1 or p1 == 1:
        p = [[0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 1, 1, 1, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0]]
        p = np.array(p)

    if q2 == 1 or q1 == 1:
        q = [[0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 1, 1, 1, 1],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0]]
        q = np.array(q)

    if r2 == 1 or r1 == 1:
        r = [[0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [1, 0, 0, 0, 0, 0, 0, 0],
             [1, 0, 0, 0, 0, 0, 0, 0],
             [1, 0, 0, 0, 0, 0, 0, 0],
             [1, 0, 0, 0, 0, 0, 0, 0]]
        r = np.array(r)

    if s2 == 1 or s1 == 1:
        s = [[0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 1, 0, 0, 0, 0, 0],
             [0, 0, 1, 0, 0, 0, 0, 0],
             [0, 0, 1, 0, 0, 0, 0, 0],
             [0, 0, 1, 0, 0, 0, 0, 0]]
        s = np.array(s)

    if t2 == 1 or t1 == 1:
        t = [[0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 1, 0, 0, 0],
             [0, 0, 0, 0, 1, 0, 0, 0],
             [0, 0, 0, 0, 1, 0, 0, 0],
             [0, 0, 0, 0, 1, 0, 0, 0]]
        t = np.array(t)

    if u2 == 1 or u1 == 1:
        u = [[0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 1],
             [0, 0, 0, 0, 0, 0, 0, 1],
             [0, 0, 0, 0, 0, 0, 0, 1],
             [0, 0, 0, 0, 0, 0, 0, 1]]
        u = np.array(u)

    if v2 == 1 or v1 == 1:
        v = [[0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [1, 1, 1, 0, 0, 0, 0, 0]]
        v = np.array(v)

    if w2 == 1 or w1 == 1:
        w = [[0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 1, 1, 1, 0, 0, 0]]
        w = np.array(w)

    if x2 == 1 or x1 == 1:
        x = [[0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 1, 1, 1, 1]]
        x = np.array(x)

    map_str = []
    blank = ''
    # 获得点阵路径map
    for i in range(0, len(map)):
        map[i] = a[i] + b[i] + c[i] + d[i] + g[i] + e[i] + f[i] + h[i] + z[i] + j[i] + k[i] + l[i] + m[i] + n[i] + o[
            i] + p[i] + q[i] + r[i] + s[i] + t[i] + u[i] + v[i] + w[i] + x[i]
    for i in range(0, len(map)):
        for j in range(0, len(map[i])):
            if map[i][j] >= 1:
                map[i][j] = 1

    for i in range(0, len(map)):
        m = ''
        for j in range(0, len(map[i])):
            m = m + str(map[i][j])
        map_str.append(blank.join(m))

    # 树莓派显示配置
    # 指定引脚
    DIN = 19
    CS = 24
    CLK = 23

    Red = 37
    Green = 35
    Blue = 33
    # 初始化
    GPIO.setmode(GPIO.BOARD)
    GPIO.setup(DIN, GPIO.OUT)
    GPIO.setup(CS, GPIO.OUT)
    GPIO.setup(CLK, GPIO.OUT)

    GPIO.setup(Red, GPIO.OUT)
    GPIO.setup(Green, GPIO.OUT)
    GPIO.setup(Blue, GPIO.OUT)

    # 指示灯控制
    def A_light(a_light):
        if a_light == 1:
            GPIO.output(33, True)
        elif a_light == 2:
            GPIO.output(35, True)
        elif a_light == 3:
            GPIO.output(37, True)

    def send(byteData):
        for bit in range(0, 8):
            if (byteData & 0x80):
                GPIO.output(DIN, True)
            else:
                GPIO.output(DIN, False)
            byteData = byteData << 1
            GPIO.output(CLK, True)
            GPIO.output(CLK, False)

    def writeWord(addr, num):
        GPIO.output(CS, True)
        GPIO.output(CS, False)
        GPIO.output(CLK, False)
        send(addr)
        send(num)
        GPIO.output(CS, True)

    # 显示路径
    def show_path():
        for i in range(0, 8):
            writeWord(i + 1, int(map_str[i], 2))

    # 重置点阵
    def clean_path():
        for i in range(0, 8):
            writeWord(i + 1, int(clean_map[i], 2))
        GPIO.output(33, False)
        GPIO.output(35, False)
        GPIO.output(37, False)

    # 初始化单片机
    def initData():
        writeWord(0x09, 0x00)
        writeWord(0x0a, 0x03)
        writeWord(0x0b, 0x07)
        writeWord(0x0c, 0x01)
        writeWord(0xff, 0x00)


    initData()
    A_light(w_light)
    show_path()

    s2 = socket.socket()
    host = '192.168.18.5'  # 主机IP地址
    port = 6665
    s2.connect((host, port))
    ask = s2.recv(1024)
    ask = ask.decode()
    got_it = 'got it'
    got_it = got_it.encode()
    s2.send(got_it)

    if ask == 're':
        clean_path()
    elif ask != 're':
        sys.exit()
    
    # shutdown?
    shutdown = input('shutdown?:y/n')
    if shutdown == 'y':
        break

    GPIO.cleanup()








